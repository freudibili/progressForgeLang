apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.progressforgelang.app'
    defaultConfig {
        applicationId 'com.progressforgelang.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv("ANDROID_VERSION_CODE")?.toInteger() ?: 1
        versionName System.getenv("ANDROID_VERSION_NAME") ?: "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            try {
                // Print out all signing properties for debugging
                println "================================================"
                println "Signing Configuration Debug:"
                println "ANDROID_KEYSTORE_FILE: ${System.getenv("ANDROID_KEYSTORE_FILE")}"
                println "android.injected.signing.store.file: ${project.findProperty("android.injected.signing.store.file")}"
                println "Current directory: ${new File(".").absolutePath}"
                println "Project directory: ${project.projectDir.absolutePath}"
                println "Root project directory: ${project.rootDir.absolutePath}"
                println "================================================"
                
                // First check if we have injected properties (from command line)
                // This fixes the 'externalOverride' signing config issues with fastlane
                def injectedKeystorePath = project.findProperty("android.injected.signing.store.file")
                if (injectedKeystorePath) {
                    println "Using injected keystore path: $injectedKeystorePath"
                    def injectedFile = new File(injectedKeystorePath.toString())
                    
                    // Ensure the path is absolute to fix daemon path issues
                    if (!injectedFile.isAbsolute()) {
                        println "Converting relative injected path to absolute path"
                        injectedFile = new File(rootProject.projectDir, injectedKeystorePath.toString())
                        println "New absolute path: ${injectedFile.absolutePath}"
                    }
                    
                    if (injectedFile.exists()) {
                        println "✅ Injected keystore file exists at: ${injectedFile.absolutePath}"
                        storeFile injectedFile
                        storePassword project.findProperty("android.injected.signing.store.password")
                        keyAlias project.findProperty("android.injected.signing.key.alias")
                        keyPassword project.findProperty("android.injected.signing.key.password")
                        return
                    } else {
                        println "❌ Injected keystore file not found: ${injectedFile.absolutePath}"
                    }
                }
                
                // Fall back to environment variable
                def keystorePath = System.getenv("ANDROID_KEYSTORE_FILE")
                println "Keystore path from env: $keystorePath"
                
                if (keystorePath != null && !keystorePath.isEmpty()) {
                    // Try to use the path directly
                    def keystoreFile = new File(keystorePath)
                    
                    // If it's a relative path, try to resolve it
                    if (!keystoreFile.isAbsolute()) {
                        keystoreFile = new File(rootProject.projectDir, keystorePath)
                    }
                    
                    if (keystoreFile.exists()) {
                        println "✅ Using keystore at: ${keystoreFile.absolutePath}"
                        storeFile keystoreFile
                        storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                        keyAlias System.getenv("ANDROID_KEY_ALIAS")
                        keyPassword System.getenv("ANDROID_KEY_PASSWORD")
                    } else {
                        // Try absolute path in app directory
                        def appKeystoreFile = new File(project.projectDir, "keystore.jks")
                        if (appKeystoreFile.exists()) {
                            println "✅ Found keystore in app directory: ${appKeystoreFile.absolutePath}"
                            storeFile appKeystoreFile
                            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                            keyAlias System.getenv("ANDROID_KEY_ALIAS")
                            keyPassword System.getenv("ANDROID_KEY_PASSWORD")
                        } else {
                            println "❌ No keystore found. Will attempt to use debug keystore for the build."
                            // Use debug configuration as a last resort
                            storeFile file('debug.keystore')
                            storePassword 'android'
                            keyAlias 'androiddebugkey'
                            keyPassword 'android'
                        }
                    }
                } else {
                    println "❌ No ANDROID_KEYSTORE_FILE environment variable set"
                    // Use debug configuration as a last resort
                    storeFile file('debug.keystore')
                    storePassword 'android'
                    keyAlias 'androiddebugkey'
                    keyPassword 'android'
                }
            } catch (Exception e) {
                println "❌ Error setting up signing config: ${e.message}"
                e.printStackTrace()
                // Use debug configuration as a last resort
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
