apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.progressforgelang.app'
    defaultConfig {
        applicationId 'com.progressforgelang.app'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode System.getenv("ANDROID_VERSION_CODE")?.toInteger() ?: 1
        versionName System.getenv("ANDROID_VERSION_NAME") ?: "1.0.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            def keystorePath = System.getenv("ANDROID_KEYSTORE_FILE")
            println "Original keystore path from environment: $keystorePath"
            
            if (keystorePath) {
                def keystoreFile
                
                if (new File(keystorePath).isAbsolute()) {
                    // Use absolute path as is
                    keystoreFile = new File(keystorePath)
                    println "Using absolute keystore path: ${keystoreFile.absolutePath}"
                } else {
                    // Handle relative path
                    keystoreFile = new File(project.rootDir, keystorePath)
                    println "Using relative keystore path: ${keystoreFile.absolutePath}"
                    
                    // If that doesn't exist, try relative to the app module
                    if (!keystoreFile.exists()) {
                        keystoreFile = new File(projectDir, keystorePath)
                        println "Trying app module relative path: ${keystoreFile.absolutePath}"
                    }
                }
                
                if (keystoreFile.exists()) {
                    println "✅ Keystore file exists at: ${keystoreFile.absolutePath}"
                    storeFile keystoreFile
                    storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                    keyAlias System.getenv("ANDROID_KEY_ALIAS")
                    keyPassword System.getenv("ANDROID_KEY_PASSWORD")
                } else {
                    println "❌ Keystore file not found at: ${keystoreFile.absolutePath}"
                    println "Searching for keystore file..."
                    
                    // Look for the keystore in common locations
                    def possibleLocations = [
                        new File(System.getenv("GITHUB_WORKSPACE") ?: "", "android/app/keystore.jks"),
                        new File(rootProject.rootDir, "android/app/keystore.jks"),
                        new File(rootProject.rootDir, "app/keystore.jks"),
                        new File(projectDir, "keystore.jks")
                    ]
                    
                    def foundKeystore = false
                    possibleLocations.each { location ->
                        if (location.exists()) {
                            println "✅ Found keystore at: ${location.absolutePath}"
                            storeFile location
                            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                            keyAlias System.getenv("ANDROID_KEY_ALIAS")
                            keyPassword System.getenv("ANDROID_KEY_PASSWORD")
                            foundKeystore = true
                            return
                        } else {
                            println "Not found at: ${location.absolutePath}"
                        }
                    }
                    
                    if (!foundKeystore) {
                        println "❌ Could not find keystore file in any location"
                        println "Root project directory: ${rootProject.rootDir.absolutePath}"
                        println "Project directory: ${projectDir.absolutePath}"
                        println "Files in app directory:"
                        projectDir.list().each { println "  $it" }
                    }
                }
            } else {
                println "❌ No keystore path provided in environment"
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }
    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
