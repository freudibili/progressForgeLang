default_platform(:ios)

before_all do
  ENV["SLACK_URL"] = "https://hooks.slack.com/services/..." # Optional Slack webhook
  setup_ci if is_ci
end

# Shared helper methods
def ensure_git_status_clean
  unless `git status`.include?("nothing to commit")
    UI.user_error!("Git status is not clean. Please commit or stash your changes.")
  end
end

def get_version_number
  require 'json'
  json = JSON.parse(File.read('../app.json'))
  json['expo']['version']
end

def increment_version_number
  require 'json'
  app_json = JSON.parse(File.read('../app.json'))
  current_version = app_json['expo']['version']
  major, minor, patch = current_version.split('.').map(&:to_i)
  new_version = "#{major}.#{minor}.#{patch + 1}"
  app_json['expo']['version'] = new_version
  File.write('../app.json', JSON.pretty_generate(app_json))
  new_version
end

def get_build_number
  Time.now.strftime("%Y%m%d%H%M")
end

def increment_build_number
  require 'json'
  app_json = JSON.parse(File.read('../app.json'))
  current_build = app_json.dig('expo', 'android', 'versionCode') || 1
  
  # Add a time component to ensure uniqueness even if app.json changes aren't pushed
  timestamp = Time.now.strftime("%H%M").to_i
  
  # Ensure the version code is higher than the current one
  # Use the last two digits of current year + month + day as the base
  base = Time.now.strftime("%y%m%d").to_i
  
  # Calculate a new version code that is guaranteed to be higher than the current one
  # and includes a time component for uniqueness
  new_build = [current_build + 1, base + timestamp].max
  
  UI.important("Generating new version code: #{new_build} (was: #{current_build})")
  
  app_json['expo']['android']['versionCode'] = new_build
  File.write('../app.json', JSON.pretty_generate(app_json))
  new_build
end

# Resolves keystore path, ensuring it's an absolute path
def resolve_keystore_path
  keystore_path = ENV["ANDROID_KEYSTORE_FILE"] || ""
  
  if keystore_path.empty? || !File.exist?(keystore_path)
    # Try the relative path as a fallback
    relative_path = File.join("..", "android", "app", "keystore.jks")
    if File.exist?(relative_path)
      keystore_path = File.absolute_path(relative_path)
    else
      keystore_path = File.absolute_path(File.join("..", "android", "app", "keystore.jks"))
    end
  else
    # Make sure we have an absolute path
    keystore_path = File.absolute_path(keystore_path)
  end
  
  keystore_path
end

platform :ios do
  desc "Deploy iOS to App Store"
  lane :deploy do
    ensure_git_status_clean

    new_version = increment_version_number
    new_build = get_build_number

    build_ios_app(
      scheme: "ProgressForgeLang",
      export_method: "app-store",
      configuration: "Release",
      clean: true,
      output_directory: "build",
      output_name: "ProgressForgeLang.ipa"
    )

    upload_to_app_store(
      skip_screenshots: true,
      skip_metadata: true,
      force: true
    )

    sh "git add ../app.json"
    sh "git commit -m 'Bump version to #{new_version} (build #{new_build})'"
  end

  desc "Deploy iOS to TestFlight"
  lane :beta do
    ensure_git_status_clean

    # Don't increment version for testing builds, just use current version
    new_version = get_version_number
    new_build = get_build_number

    build_ios_app(
      scheme: "ProgressForgeLang",
      export_method: "app-store",
      configuration: "Release",
      clean: true,
      output_directory: "build",
      output_name: "ProgressForgeLang.ipa"
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      changelog: "New beta build #{new_build}"
    )

    # For TestFlight we don't need to commit any changes to app.json
  end
end

platform :android do
  desc "Deploy Android to Play Store"
  lane :deploy do
    ensure_git_status_clean

    new_version = increment_version_number
    new_build = increment_build_number
    version_code = new_build.to_i
    keystore_path = resolve_keystore_path

    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android",
      flags: "--stacktrace",
      properties: {
        "android.injected.signing.store.file" => keystore_path,
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
        "android.injected.version.code" => version_code.to_s,
        "android.injected.version.name" => get_version_number
      }
    )

    upload_to_play_store(
      track: 'production',
      release_status: 'completed',
      metadata_path: "fastlane/metadata/android",
      json_key: "fastlane/google-play-credentials.json",
      package_name: "com.progressforgelang.app"
    )

    sh "git add ../app.json"
    sh "git commit -m 'Bump version to #{new_version} (build #{new_build})'"
  end

  desc "Deploy Android to internal testing"
  lane :beta do
    ensure_git_status_clean

    # Don't increment version for testing builds, just use current version
    new_version = get_version_number
    
    # Get a unique build number
    begin
      new_build = increment_build_number
      version_code = new_build.to_i
      keystore_path = resolve_keystore_path

      gradle(
        task: "bundleRelease",
        project_dir: "android",
        properties: {
          "android.injected.signing.store.file" => keystore_path,
          "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
          "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
          "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
          "android.injected.version.code" => version_code.to_s,
          "android.injected.version.name" => new_version
        },
        flags: "--stacktrace",
        print_command: true
      )

      begin
        upload_to_play_store(
          track: 'internal',
          release_status: 'draft',
          skip_upload_apk: true,
          skip_upload_metadata: true,
          skip_upload_images: true,
          skip_upload_screenshots: true,
          skip_upload_changelogs: true,
          json_key: "fastlane/google-play-credentials.json",
          package_name: "com.progressforgelang.app"
        )
      rescue => e
        # If the upload fails due to version code already used, increment again and retry
        if e.message.include?("Version code") && e.message.include?("has already been used")
          UI.error("Version code #{version_code} has already been used. Incrementing and retrying...")
          # Force increment by 10 to avoid collisions
          app_json = JSON.parse(File.read('../app.json'))
          current_build = app_json.dig('expo', 'android', 'versionCode')
          new_build = current_build + 10
          app_json['expo']['android']['versionCode'] = new_build
          File.write('../app.json', JSON.pretty_generate(app_json))
          version_code = new_build
          
          # Rebuild with new version code
          gradle(
            task: "bundleRelease",
            project_dir: "android",
            properties: {
              "android.injected.signing.store.file" => keystore_path,
              "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
              "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
              "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
              "android.injected.version.code" => version_code.to_s,
              "android.injected.version.name" => new_version
            },
            flags: "--stacktrace",
            print_command: true
          )
          
          # Try uploading again
          upload_to_play_store(
            track: 'internal',
            release_status: 'draft',
            skip_upload_apk: true,
            skip_upload_metadata: true,
            skip_upload_images: true,
            skip_upload_screenshots: true,
            skip_upload_changelogs: true,
            json_key: "fastlane/google-play-credentials.json",
            package_name: "com.progressforgelang.app"
          )
        else
          # If it's a different error, re-raise it
          raise e
        end
      end

      # Only commit the version code change, not a version bump
      sh "git add ../app.json"
      sh "git commit -m 'Update build number to #{new_build} (for internal testing)'"
    rescue => e
      UI.error("Error in beta lane: #{e.message}")
      raise e
    end
  end
end

error do |lane, exception|
  slack(
    message: "ðŸš¨ Error in lane #{lane}: #{exception.message}",
    success: false
  )
end
