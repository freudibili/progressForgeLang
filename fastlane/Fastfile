default_platform(:ios)

before_all do
  ENV["SLACK_URL"] = "https://hooks.slack.com/services/..." # Optional Slack webhook
  setup_ci if is_ci
end

# Shared helper methods
def ensure_git_status_clean
  unless `git status`.include?("nothing to commit")
    UI.user_error!("Git status is not clean. Please commit or stash your changes.")
  end
end

def get_version_number
  require 'json'
  json = JSON.parse(File.read('../app.json'))
  json['expo']['version']
end

def increment_version_number
  require 'json'
  app_json = JSON.parse(File.read('../app.json'))
  current_version = app_json['expo']['version']
  major, minor, patch = current_version.split('.').map(&:to_i)
  new_version = "#{major}.#{minor}.#{patch + 1}"
  app_json['expo']['version'] = new_version
  File.write('../app.json', JSON.pretty_generate(app_json))
  new_version
end

def get_build_number
  Time.now.strftime("%Y%m%d%H%M")
end

def increment_build_number
  require 'json'
  app_json = JSON.parse(File.read('../app.json'))
  current_build = app_json.dig('expo', 'android', 'versionCode') || 1
  new_build = current_build + 1
  app_json['expo']['android']['versionCode'] = new_build
  File.write('../app.json', JSON.pretty_generate(app_json))
  new_build
end

platform :ios do
  desc "Deploy iOS to App Store"
  lane :deploy do
    ensure_git_status_clean

    new_version = increment_version_number
    new_build = get_build_number

    build_ios_app(
      scheme: "ProgressForgeLang",
      export_method: "app-store",
      configuration: "Release",
      clean: true,
      output_directory: "build",
      output_name: "ProgressForgeLang.ipa"
    )

    upload_to_app_store(
      skip_screenshots: true,
      skip_metadata: true,
      force: true
    )

    sh "git add ../app.json"
    sh "git commit -m 'Bump version to #{new_version} (build #{new_build})'"
  end

  desc "Deploy iOS to TestFlight"
  lane :beta do
    ensure_git_status_clean

    new_version = increment_version_number
    new_build = get_build_number

    build_ios_app(
      scheme: "ProgressForgeLang",
      export_method: "app-store",
      configuration: "Release",
      clean: true,
      output_directory: "build",
      output_name: "ProgressForgeLang.ipa"
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      changelog: "New beta version #{new_version} (build #{new_build})"
    )

    sh "git add ../app.json"
    sh "git commit -m 'Bump version to #{new_version} (build #{new_build})'"
  end
end

platform :android do
  desc "Deploy Android to Play Store"
  lane :deploy do
    ensure_git_status_clean

    new_version = increment_version_number
    new_build = increment_build_number

    gradle(
      task: "bundle",
      build_type: "Release",
      project_dir: "android",
      flags: "--stacktrace --info",
      properties: {
        "android.injected.signing.store.file" => ENV["ANDROID_KEYSTORE_FILE"],
        "android.injected.signing.store.password" => ENV["ANDROID_KEYSTORE_PASSWORD"],
        "android.injected.signing.key.alias" => ENV["ANDROID_KEY_ALIAS"],
        "android.injected.signing.key.password" => ENV["ANDROID_KEY_PASSWORD"],
        "android.injected.version.code" => new_build.to_s,
        "org.gradle.logging.level" => "info"
      }
    )

    upload_to_play_store(
      track: 'production',
      release_status: 'completed',
      metadata_path: "fastlane/metadata/android",
      json_key: "fastlane/google-play-credentials.json",
      package_name: "com.progressforgelang.app"
    )

    sh "git add ../app.json"
    sh "git commit -m 'Bump version to #{new_version} (build #{new_build})'"
  end

  desc "Deploy Android to internal testing"
  lane :beta do
    ensure_git_status_clean

    new_version = increment_version_number
    new_build = increment_build_number
    
    # Print diagnostics about the environment
    sh "echo 'Android SDK location: $ANDROID_SDK_ROOT'"
    sh "echo 'Android NDK version: $(ls -la $ANDROID_SDK_ROOT/ndk 2>/dev/null || echo NDK not found)'"
    sh "echo 'Java version: $(java -version 2>&1 | head -n 1)'"

    # Build the app using direct shell command for better diagnostics
    sh("cd ../android && ./gradlew bundleRelease " \
       "-Pandroid.injected.signing.store.file=#{ENV['ANDROID_KEYSTORE_FILE']} " \
       "-Pandroid.injected.signing.store.password=#{ENV['ANDROID_KEYSTORE_PASSWORD']} " \
       "-Pandroid.injected.signing.key.alias=#{ENV['ANDROID_KEY_ALIAS']} " \
       "-Pandroid.injected.signing.key.password=#{ENV['ANDROID_KEY_PASSWORD']} " \
       "-Pandroid.injected.version.code=#{new_build} " \
       "-Dorg.gradle.logging.level=info " \
       "--full-stacktrace --info --debug")

    upload_to_play_store(
      track: 'internal',
      release_status: 'draft',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      skip_upload_changelogs: true,
      json_key: "fastlane/google-play-credentials.json",
      package_name: "com.progressforgelang.app"
    )

    sh "git add ../app.json"
    sh "git commit -m 'Bump version to #{new_version} (build #{new_build})'"
  end
end

error do |lane, exception|
  slack(
    message: "ðŸš¨ Error in lane #{lane}: #{exception.message}",
    success: false
  )
end
